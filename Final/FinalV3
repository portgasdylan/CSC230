#include <M5Core2.h>
#include <WiFi.h>
#include "secrets.h" //this is another file
#include "ThingSpeak.h"
#include <HTTPClient.h>

//Firebase
#include <Firebase_ESP_Client.h>
#include <addons/RTDBHelper.h>
#include <addons/TokenHelper.h>
FirebaseConfig fbConfig;
FirebaseAuth fbAuth;
FirebaseData fbdo;

//External Button Setup
const int BUTTON_PIN1 = 33;
const int BUTTON_PIN2 = 26;
bool lastButtonState1 = HIGH;
bool lastButtonState2 = HIGH;

//Check if screen is on
bool screenToggled = false;

//LED pin definitions
const int LED1 = 27;
const int LED2 = 19;
const int LED3 = 25;

// ThingSpeak & Wi-Fi
char ssid[] = SECRET_SSID;   // your network SSID (name)       this will all be found in secrets.h!
char pass[] = SECRET_PASS;   // your network password 
WiFiClient client;
unsigned long myChannelNumber = SECRET_CH_ID;
const char * myWriteAPIKey = SECRET_WRITE_APIKEY;

int tallyCount = 0;
int keyIndex = 0;


// Define colors (can add more)
uint32_t colors[] = { RED, GREEN, BLUE, YELLOW, CYAN, MAGENTA, WHITE};
int numColors = sizeof(colors) / sizeof(colors[0]);
int currentIndex = 0;
unsigned long lastChangeTime = 0;
bool colorSent = false;

//Professor & Phrase Set-up
const char* professors[] = { "ProfA", "ProfB", "ProfC" };
const size_t NUM_PROFS = sizeof(professors)/sizeof(professors[0]);

const char* phrases[] = { "phrase1", "phrase2" };
const size_t NUM_PHRASES = sizeof(phrases)/sizeof(phrases[0]);

int currentProf = 0;
int phraseTally[NUM_PROFS][NUM_PHRASES] = {0};

// Google App Script endpoint
const char* GOOGLE_SCRIPT_URL = "https://script.google.com/macros/s/AKfycbwvKDwWmLfmNyGZ6dOZGpa-fWbUgHcv1a8oPj6BKUHbP8K4uI_J-jUy-nDmizIu8NRS/exec";

// Functions
void updateColor();               // Function declaration
void sendColorToThingSpeak();     // Function declaration
void sendTallyToGoogle(const char* prof, const char* phrase, int count);
void sendTallyToFirebase(const char* prof, const char* phrase, int count);

void setup() {
  M5.begin();
  Serial.begin(115200);


  //LED setup
  pinMode(LED1, OUTPUT);
  pinMode(LED2, OUTPUT);
  pinMode(LED3, OUTPUT);
  
  //Turn LEDs off initially
  digitalWrite(LED1, LOW);
  digitalWrite(LED2, LOW);
  digitalWrite(LED3, LOW);

  //Turn LEDs one by one
  delay(500);
  digitalWrite(LED1, HIGH);
  delay(500);
  digitalWrite(LED2, HIGH);
  delay(500);
  digitalWrite(LED3, HIGH);

  //External buttons
  pinMode(BUTTON_PIN1, INPUT_PULLUP);
  pinMode(BUTTON_PIN2, INPUT_PULLUP);

  
  M5.Lcd.setTextSize(2);
  M5.Lcd.setCursor(10, 10);
  M5.Lcd.println("Connecting WiFi...");

   WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  }
    Serial.println("\nConnected.");
    M5.Lcd.println("WiFi connected.");

    ThingSpeak.begin(client);

    fbConfig.api_key = FIREBASE_API_KEY;
    fbConfig.database_url = FIREBASE_DATABASE_URL;
    Firebase.begin(&fbConfig, &fbAuth);
    Firebase.reconnectWiFi(true);

    updateColor();  // Show the first color
  }



void loop(){
  M5.update();
 if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi disconnected. Reconnecting...");
    WiFi.begin(ssid, pass);
    delay(1000);
    return;  // skip rest of loop until reconnected
  }

  //external button 1
  bool b1 = digitalRead(BUTTON_PIN1) == LOW;
  if (b1 && lastButtonState1 == HIGH) {
    int c = ++phraseTally[currentProf][0];
    sendTallyToGoogle(professors[currentProf], phrases[0], c);
    sendTallyToFirebase(professors[currentProf], phrases[0], c);
    Serial.printf("Tally %s:%s = %d\n",
    professors[currentProf], phrases[0], c);
    delay(200);
  }
  lastButtonState1 = !b1;

  //external button 2
  bool b2 = digitalRead(BUTTON_PIN2) == LOW;
  if (b2 && lastButtonState2 == HIGH) {
    int c = ++phraseTally[currentProf][1];
    sendTallyToGoogle(professors[currentProf], phrases[1], c);
    sendTallyToFirebase(professors[currentProf], phrases[1], c);
    Serial.printf("Tally %s:%s = %d\n",
    professors[currentProf], phrases[1], c);
    delay(200);
  }
  lastButtonState1 = !b2;

  //M5core2 buttons
  if (M5.BtnA.wasPressed()) { currentProf = 0; updateColor(); }
  if (M5.BtnB.wasPressed()) { currentProf = 1; updateColor(); }
  if (M5.BtnC.wasPressed()) { currentProf = 2; updateColor(); }


  // If on a color for more than 5 seconds, send to ThingSpeak
  if (!colorSent && millis() - lastChangeTime > 5000) {
    sendColorToThingSpeak();
    colorSent = true;
  }
}

 


void updateColor() {
  uint32_t color = colors[currentIndex];
  M5.Lcd.fillScreen(color);
  M5.Lcd.setTextSize(2);
  M5.Lcd.setCursor(10, 10);
  M5.Lcd.setTextColor(BLACK, color);  // Contrast
  M5.Lcd.printf("Color: #%06X", color);
  M5.Lcd.setCursor(10, 40);
  M5.Lcd.printf("ProfL %s", professors[currentProf]);
  lastChangeTime = millis();
  colorSent = false;
}

void sendColorToThingSpeak() {
  uint32_t color = colors[currentIndex];
  int x = ThingSpeak.writeField(myChannelNumber, 1, (long)color, myWriteAPIKey);

  if (x == 200) {
    Serial.print("Sent color to ThingSpeak: #");
    Serial.println(color, HEX);
  } else {
    Serial.print("Failed to send. HTTP error code: ");
    Serial.println(x);
  }
}

void sendTallyToGoogle(const char* prof, const char* phrase, int count) {
  HTTPClient http;
  String url = String(GOOGLE_SCRIPT_URL)
               + "?prof="   + prof
               + "&phrase=" + phrase
               + "&count="  + count;
  http.begin(url);
  int code = http.GET();
  if (code == 200) {
    Serial.println("→ Google Sheets OK");
  } else {
    Serial.printf("GS error %d\n", code);
  }
  http.end();
}

void sendTallyToFirebase(const char* prof, const char* phrase, int count) {
  String path = String("/tallies/")
                + prof
                + "/"
                + phrase;
  if (Firebase.RTDB.setInt(&fbdo, path, count)) {
    Serial.println("→ Firebase OK");
  } else {
    Serial.print("FB error: ");
    Serial.println(fbdo.errorReason());
  }
}


